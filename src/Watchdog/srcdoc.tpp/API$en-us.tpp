topic "Tutorial";
[2 $$0,0#00000000000000000000000000000000:Default]
[l288;i1120;a17;O9;~~~.1408;2 $$1,0#10431211400427159095818037425705:param]
[a83;*R6 $$2,5#31310162474203024125188417583966:caption]
[H4;b83;*4 $$3,5#07864147445237544204411237157677:title]
[i288;O9;C2 $$4,6#40027414424643823182269349404212:item]
[b42;a42;2 $$5,5#45413000475342174754091244180557:text]
[l288;b17;a17;2 $$6,6#27521748481378242620020725143825:desc]
[l321;C@5;1 $$7,7#20902679421464641399138805415013:code]
[b2503;2 $$8,0#65142375456100023862071332075487:separator]
[*@(0.0.255)2 $$9,0#83433469410354161042741608181528:base]
[C2 $$10,0#37138531426314131251341829483380:class]
[l288;a17;*1 $$11,11#70004532496200323422659154056402:requirement]
[i417;b42;a42;O9;~~~.416;2 $$12,12#10566046415157235020018451313112:tparam]
[b167;C2 $$13,13#92430459443460461911108080531343:item1]
[i288;a42;O9;C2 $$14,14#77422149456609303542238260500223:item2]
[*@2$(0.128.128)2 $$15,15#34511555403152284025741354420178:NewsDate]
[l321;*C$7;2 $$16,16#03451589433145915344929335295360:result]
[l321;b83;a83;*C$7;2 $$17,17#07531550463529505371228428965313:result`-line]
[l160;*C+117 $$18,5#88603949442205825958800053222425:package`-title]
[2 $$19,0#53580023442335529039900623488521:gap]
[C2 $$20,20#70211524482531209251820423858195:class`-nested]
[b50;2 $$21,21#03324558446220344731010354752573:Par]
[H6;0 $$22,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$23,0#37138531426314131252341829483370:codeitem]
[0 $$24,0#96390100711032703541132217272105:end]
[{_}%EN-US 
[s2; API&]
[s0; &]
[s0; The public API provided for clients is really simple. It currently 
consists of only 4 commands:&]
[s0; &]
[s23;:Auth`(Http`&`): [*C+117 api/auth/<client`_id>]&]
[s6; Authentication request that must be called before any other 
request. It returns 4 letter salt and 32 letter nonce value, 
that the client must combine with its password and send hashed 
with next request to the Server to prove its identity.&]
[s6; Response headers:&]
[s6; -|-|WD`-Nonce:-|-|32 byte hexadecimal nonce string&]
[s6; -|-|WD`-Id:-|-|-|32 byte post identitty string&]
[s6; -|-|WD`-Salt:-|-|4 byte password salt&]
[s6; -|-|Set`-Cookie:-|-|Session cookie&]
[s6; Response:&]
[s6; -|-|Empty&]
[s6; &]
[s23;:GetWork`(Http`&`): [*C+117 api/getwork] [@3 `[POST`]]&]
[s6; Request headers:&]
[s6; -|-|WD`-Nonce: -|-|Value of the same header returned from auth request&]
[s6; -|-|WD`-Auth:-|-|MD5(WD`-Nonce `+ MD5(WD`-Salt `+ password))&]
[s6; -|-|Cookie:-|-|Same cookie as came with auth request&]
[s6; POST variables:&]
[s6; -|-|client`_id:-|-|ID of client&]
[s6; -|-|max`_age:-|-|maximum age of returned commits, optional&]
[s6; Response:&]
[s6; -|-|comma separated list of revisions available for building&]
[s6; &]
[s23;:AcceptWork`(Http`&`): [*C+117 api/acceptwork ][@3 `[POST`]]&]
[s6; Request headers:&]
[s6; -|-|WD`-Nonce: -|-|Value as returned from auth request&]
[s6; -|-|WD`-Auth:-|-|MD5(nonce`+MD5(salt`+password))&]
[s6; -|-|Cookie:-|-|Same cookie as came with auth request&]
[s6; POST variables:&]
[s6; -|-|client`_id:-|-|ID of client&]
[s6; -|-|revision:-|-|Revision to be accepted for building&]
[s6; -|-|start:-|-|-|Start time, optional, defaults to current time&]
[s6; Response:&]
[s6; -|-|Empty&]
[s6; &]
[s23;:SubmitWork`(Http`&`): [*C+117 api/submitwork] [@3 `[POST`]]&]
[s6; Request headers:&]
[s6; -|-|WD`-Nonce: -|-|Value as returned from auth request&]
[s6; -|-|WD`-Auth:-|-|MD5(nonce`+MD5(salt`+password))&]
[s6; -|-|Cookie:-|-|Same cookie as came with auth request&]
[s6; POST variables:&]
[s6; -|-|client`_id:-|-|ID of client&]
[s6; -|-|revision:-|-|Revision being submitted&]
[s6; -|-|result:-|-|-|Status to be set &]
[s6; -|-|time:-|-|-|Duration&]
[s6; -|-|output:-|-|Output from the process (log)&]
[s6; -|-|start:-|-|-|Start time, optional&]
[s6; -|-|end:-|-|-|End time, optional, defaults to current time&]
[s6; Response:&]
[s6; -|-|Empty&]
[s6; &]
[s0; &]
[s0; There are also two special commands that can be only executed 
locally (from the same machine as where the server runs) that 
are used to launch some periodical tasks of Server. They are 
documented here only for the sake of completeness.&]
[s0; &]
[s24; &]
[s23;:Update`(Http`&`): [*C+117 api/update]&]
[s6; Tells the Server that it should check the SVN repository for 
new commits.&]
[s0; &]
[s23;:Clean`(Http`&`): [*C+117 api/clean]&]
[s6; Causes the Server to forget about all jobs that stayed too long 
in the `"In progress`" state.&]
[s24; &]
[s0; ]]