#include "Server.h"

SKYLARK(GetWork, "api/getwork/*")
{
	int cid = http.Int(0);
	
	Client::UpdateActivity(cid);
	SQLR * Select(UID)
	       .From(COMMITS)
	       .LeftJoin(RESULT).On(UID == CMT_UID && CLIENT_ID == cid)
	       .InnerJoin(CLIENT).On(ID == cid)
	       .Where((IsNull(STATUS)) 
	              && Regexp(PATH, SRC)
	              && Regexp(BRANCH, BRANCHES)
	              && DT >= DateSub(GetUtcTime(), SqlInterval(MAX_AGE, "DAY")))
	       .OrderBy(DT);
	while(SQLR.Fetch())
		http << SQLR[0] << ",";
}

SKYLARK(AcceptWork, "api/acceptwork/*:POST")
{
	int cid = http.Int(0);
	if(!CheckAuth(http, SQL, cid, "/api/acceptwork/"+IntStr(cid)))
		return;

	Time start;
	if(IsNull(http["start"])){
		start = GetUtcTime();
	} else {
		start.Set(ScanInt64(AsString(http["start"])));
	}
	String builder = Nvl((String)http["builder"], http.GetPeerAddr());
	Client::UpdateActivity(cid, true);
	Result result;
	result("CMT_UID", http["commit"])
	      ("CLIENT_ID", cid)
	      ("START", start)
	      ("STATUS", WD_INPROGRESS)
	      ("BUILDER", builder);
	result.Save();
	http.Response(200, "OK");
}

SKYLARK(SubmitWork, "api/submitwork/*:POST")
{
	int cid = http.Int(0);
	if(!CheckAuth(http, SQL, cid, "/api/submitwork/"+IntStr(cid)))
		return;
	
	Time start;
	if(!IsNull(http["start"])) {
		start.Set(ScanInt64(AsString(http["start"])));
	}
	Time end;
	if(IsNull(http["end"])){
		end = GetUtcTime();
	} else {
		end.Set(ScanInt64(AsString(http["end"])));
	}
	String output = http["output"];
	String outputfile = Format("%s/%s/%d.log",(String)Ini::output_dir,http["commit"],cid);
	RLOG("Saving output to '"<<outputfile<<"'");
	RealizePath(outputfile);
	SaveFile(outputfile, output);
	Client::UpdateActivity(cid, true);
	String commit = http["commit"];
	int ok = Nvl(http.Int("ok"), 0);
	int errors = Nvl(http.Int("errors"), 0);
	int failures = Nvl(http.Int("failures"), 0);
	int skipped = Nvl(http.Int("skipped"), 0);
	String builder = Nvl((String)http["builder"], http.GetPeerAddr());
	bool partial = Nvl(http.Int("partial"), 0) > 0;
	
	Result result;
	result("CMT_UID", commit)
	      ("CLIENT_ID", cid)
	      ("STATUS", partial ? WD_INPROGRESS : WD_DONE)
	      ("OK", ok)
	      ("ERR", errors)
	      ("FAIL", failures)
	      ("SKIP", skipped)
	      ("BUILDER", builder);
	if(IsNull(start))
		result("START", start);
	if(!partial)
		result("FINISHED", end);
	
	result.Save();
	
	http.Response(200,"OK");
	
	if (partial)
		return;
	
	// now send emails
	http.Finalize();
	
	SQLR * Select(UID, BRANCH, CMT, DT, AUTHOR, MSG, PATH,
	              ID, NAME, DESCR, SRC,
	              START, FINISHED, STATUS,
	              TimeDiff(START, FINISHED).As("DURATION"))
	      .From(RESULT)
	      .InnerJoin(COMMITS).On(CMT_UID == UID)
	      .InnerJoin(CLIENT).On(ID == CLIENT_ID)
	      .Where(CMT_UID==commit && CLIENT_ID == cid);
	ValueMap data;
	SQLR.Fetch(data);
	data.Add("STATUSSTR", ComputeStatus(WD_DONE, ok, failures, errors));
	http("DATA", data)("SELF", String(Ini::server_url));
	String html = http.RenderString("templates/resultmail");
	http("PLAIN",1);
	String text = http.RenderString("templates/resultmail");
	
	ValueMap m;
	Vector<String> to, tokens;
	SQLR * Select(EMAIL,FILTER,SqlFunc("md5",Concat(SqlSet(EMAIL,FILTER,TOKEN))).As("TOK")).From(MAIL);
	while(SQLR.Fetch(m)){
		if(MatchFilter(m["FILTER"], commit, data["BRANCH"], cid, errors+failures==0, data["AUTHOR"], data["PATH"])){
			to.Add(m["EMAIL"]);
			tokens.Add(m["TOK"]);
		}
	}
	SendEmails(to, tokens, Format("%s %d", data["NAME"], commit), text, html);
}

SKYLARK(GetState, "api/getstate:POST") {
	if(!CheckAuth(http, SQL, 0, "/api/getstate"))
		return;
	SQLR * Select(BRANCH, SqlFunc("max",SqlSet(DT)).As("STATE"))
	       .From(COMMITS)
	       .Where(Regexp(BRANCH, http["branches"]))
	       .GroupBy(BRANCH);
	ValueMap vm;
	while(SQLR.Fetch(vm))
		http << vm["BRANCH"] << "\t" << vm["STATE"] << "\n";
}

SKYLARK(Update, "api/update:POST") {
	if(!CheckAuth(http, SQL, 0, "/api/update"))
		return;
	Vector<String> data = Split(AsString(http["data"]), "\n");
	for(int i = 0; i < data.GetCount(); i++){
		Vector<String> line = Split(data[i], "\t", false);
		Commit commit;
		commit("UID", line[0])
		      ("BRANCH", line[1])
		      ("CMT", line[2])
		      ("AUTHOR", line[3])
		      ("DT", line[4])
		      ("MSG", SqlEscape(line.At(5,"*** empty log message ***")))
		      ("PATH", line.At(6, ""));
		commit.Save();
		if(i % 100 == 99){
			if(SQL.IsOpen())
				SQL.Commit();
			SQL.Begin();
		}
	}
	http << "OK\n";
}

SKYLARK(Delete, "api/deletebranch:POST") {
	if(!CheckAuth(http, SQL, 0, "/api/deletebranch"))
		return;
	Vector<String> data = Split(AsString(http["data"]), "\n");
	for(int i = 0; i < data.GetCount(); i++){
		Branch::Delete(data[i]);
	}
	http << "OK\n";
}

SKYLARK(Clean, "api/clean:POST") {
	if(!CheckAuth(http, SQL, 0, "/api/clean"))
		return;
	http << "OK\n";
	http.Finalize();
	CleanResults();
	CleanAuth();
}
