#include "Server.h"

SKYLARK(HomePage, "") {
	Time yesterday(GetUtcTime()-86400);
	Date monthago(AddMonths(GetUtcTime(), -1));
	SQLR * Select(CountIf(OK+ERR+FAIL+SKIP, DT > yesterday).As("TESTS_DAILY"),
	              CountIf(OK,  DT > yesterday).As("OK_DAILY"),
	              CountIf(ERR,  DT > yesterday).As("ERR_DAILY"),
	              CountIf(FAIL, DT > yesterday).As("FAIL_DAILY"),
	              CountIf(OK+ERR+FAIL+SKIP, DT > monthago).As("TESTS_MONTHLY"),
	              CountIf(OK,  DT > monthago).As("OK_MONTHLY"),
	              CountIf(ERR,  DT > monthago).As("ERR_MONTHLY"),
	              CountIf(FAIL, DT > monthago).As("FAIL_MONTHLY"),
	              CountIf(OK+ERR+FAIL+SKIP, true).As("TESTS_TOTAL"),
	              CountIf(OK,  true).As("OK_TOTAL"),
	              CountIf(ERR,  true).As("ERR_TOTAL"),
	              CountIf(FAIL, true).As("FAIL_TOTAL"),
	              CountIf(1, STATUS == WD_INPROGRESS).As("RUNNING"),
	              CountIf(1, DT > yesterday).As("COMMITS_DAILY"),
	              CountIf(1, DT > monthago).As("COMMITS_MONTHLY"),
	              CountIf(1, true).As("COMMITS_TOTAL"),
	              Count(Distinct(BRANCH)).As("BRANCH_COUNT"),
	              Count(Distinct(AUTHOR)).As("AUTHOR_COUNT"))
	      .From(COMMITS)
	      .LeftJoin(RESULT).On(CMT_UID == UID);
	ValueMap stats;
	if(!SQLR.Fetch(stats)){
		http << "Database error";
		return;
	}
	SetComputedAttributes(stats, WD_DONE, "_DAILY");
	SetComputedAttributes(stats, WD_DONE, "_MONTHLY");
	SetComputedAttributes(stats, WD_DONE, "_TOTAL");
	ValueMap misc;
	SQLR * Select(CountIf(1, LAST_WORK > (GetUtcTime()-86400)).As("ACTIVE_DAILY"),
	             CountIf(1, LAST_WORK > AddMonths(GetUtcTime(), -1)).As("ACTIVE_MONTHLY"),
	             CountIf(1, SqlBool::True()).As("ACTIVE_TOTAL"))
	      .From(CLIENT)
	      .Where(ID>0);
	if(!SQLR.Fetch(misc)){
		http << "Database error";
		return;
	}
	
	http("MISC", misc)("STATS", stats)
	    .RenderResult("templates/index");
}

SKYLARK(Clients, "clients") {
	http("CLIENT", Client::LoadAll())
	    .RenderResult("templates/clients");
}

SKYLARK(EditClient, "editclient/*") {
	int cid = -1;
	Client client;
	client.Load(StrInt(http[0]));

	String id = http[".__identity__"];
	if(id.IsEmpty()) {
		id = AsString(Uuid::Create());
		http.SessionSet("__identity__", id);
	}

	http("CLIENT", client.data)("WD_ID", id)
	    .RenderResult("templates/editclient");
}

SKYLARK(SaveClient, "saveclient:POST"){
	int cid = http.Int("client");
	if(!CheckAuth(http, SQL, cid, "/saveclient"))
		return;
	Client client;
	if(cid>=0) {
		client.Load(cid);
	}
	int maxage = http.Int("max_age");
	client("NAME", http["name"])
	      ("DESCR", http["description"])
	      ("SRC", http["path"])
	      ("BRANCHES", http["branches"])
	      ("MAX_AGE", maxage>=0?maxage:14);
	if(cid<0 || http["changepwd"]=="on") {
		client("PASSWORD", http["password"])
		      ("SALT", http["salt"]);
	}
	client.Save();
	http.Redirect("/clients");
}

SKYLARK(RemoveClient, "removeclient/*:POST"){
	int cid = http.Int(0);
	if(!CheckAuth(http, SQL, cid, "/removeclient/"+IntStr(cid)))
		return;
	Result::Delete(Null, cid);
	Client::Delete(cid);
	http.Redirect("/clients");
}

SKYLARK(Client, "client/*") {
	int cid = http.Int(0);
	struct Client client;
	if(!client.Load(cid)) {
		http.Response(404, "Client not found");
		return;
	}
	http("CLIENT", client.data)
	    ("RESULTS", client.FetchResults(CommitFilter(http)))
	    .RenderResult("templates/client");
}

SKYLARK(Commits, "commits") {
	http("COMMITS", Commit::LoadPage(CommitFilter(http)))
	    .RenderResult("templates/commits");
}

SKYLARK(Commit, "commit/*") {
	struct Commit commit;
	if(!commit.Load(http[0]))
		http.Response(404, "Commit not found");
	else
		http("COMMIT", commit.data)("RESULTS", commit.FetchResults())
		    .RenderResult("templates/commit");
}

SKYLARK(Results, "results") {
	ValueMap results = Result::LoadPage(CommitFilter(http));
	http("RESULTS", results["RESULTS"])
	    ("CLIENTS", results["CLIENTS"])
	    ("COMMITS", results["COMMITS"])
	    ("ALLCLIENTS", results["ALLCLIENTS"])
	    .RenderResult("templates/results");
}

SKYLARK(Result, "result/*/*") {
	struct Result result;
	if(!result.Load(http[0], http.Int(1))){
		http.Response(404, "Result data not found");
		return;
	}
	http("RESULT", result.data)("OUTPUT", result.FetchOutput())
	    .RenderResult("templates/result");
}

SKYLARK(Branches, "branches") {
	http("BRANCHES", Branch::LoadAll()).RenderResult("templates/branches");
}

SKYLARK(Authors, "authors") {
	SQL * Select(AUTHOR,
	             SqlFunc("COUNT",Distinct(UID)).As("CMT_CNT"),
	             SqlMin(DT).As("FIRST"),
	             SqlMax(DT).As("LAST"),
	             SqlSum(OK).As("OK"),
	             SqlSum(FAIL).As("FAIL"),
	             SqlSum(ERR).As("ERR"),
	             SqlSum(SKIP).As("SKIP"))
	      .From(COMMITS)
	      .LeftJoin(RESULT).On(UID == CMT_UID)
	      .GroupBy(AUTHOR)
	      .OrderBy(AUTHOR);
	ValueMap vm;
	ValueMap authors;
	while(SQL.Fetch(vm)) {
		SetComputedAttributes(vm, WD_DONE);
		authors.Set(vm["AUTHOR"],vm);
	}
	http("AUTHORS", authors).RenderResult("templates/authors");
}

void Auth(Http& http, int cid) {
	ValueMap clients;
	String salts;
	
	struct Client admin;
	admin.Load(0);
	admin.SetAuthInfo(salts, clients);
	
	if(cid>0) {
		struct Client client;
		if(!client.Load(cid)) {
			http.Response(404, "Client not found");
			return;
		}
		client.SetAuthInfo(salts, clients);
	}
	
	String id = http[".__identity__"];
	if(id.IsEmpty()) {
		id = AsString(Uuid::Create());
		http.SessionSet("__identity__", id);
	}
	
	String target;
	for(int i = 0; i < http.GetParamCount(); ++i)
		target.Cat() << "/" << http[i];
	
	String nonce = AsString(Uuid::Create());
	
	http.SetHeader("wd_nonce",nonce)
	    .SetHeader("wd_id", id)
	    .SetHeader("wd_action", target)
	    .SetHeader("wd_salts", salts);
	SQL * Insert(AUTH)(NONCE, nonce)(VALID, GetUtcTime());
	http("WD_ID", id)
	    ("WD_NONCE", nonce)
	    ("CLIENTS", clients)
	    ("TARGET", target)
	    .RenderResult("templates/auth");
}

SKYLARK(WebAuth, "auth/**"){
	int cid;
	for(int i = 0; i < http.GetParamCount(); i++){
		cid = http.Int(i);
		if(!IsNull(cid))
			break;
	}
	Auth(http, cid);
}

SKYLARK(WebAuthPost, "auth/**:POST"){
	const VectorMap<String, Value>& vars = http.Variables();
	String pass;
	ValueMap vm;
	for(int i = 0; i < vars.GetCount(); i++){
		if(vars.GetKey(i).StartsWith("wd_"))
			vm.Add(vars.GetKey(i).Mid(3), vars[i]);
	}
	int cid = 0;
	if(vars.Find("wd_client") >= 0)
		cid=http.Int("wd_client");
	http("PASS", vm);
	Auth(http, http.Int("wd_client"));
}

SKYLARK(Remove, "remove/*/*:POST"){
	int cid = http.Int(0);
	String uid = http[1];
	if(!CheckAuth(http, SQL, cid, "/remove/"+IntStr(cid)+"/"+uid))
		return;
	Result::Delete(uid, cid);
	http.Redirect("/client/"+IntStr(cid)+"?uid="+uid);
}

SKYLARK(Output, "output/*/*"){
	struct Result result;
	result("CLIENT_ID", http.Int(0))("CMT_UID", http.Int(1));
	
	String output = result.FetchOutput();
	if(output.IsVoid()){
		http.Response(404, "Result log not found");
	} else {
		http.ContentType("text/plain");
		http << output;
	}
}

SKYLARK(Stats, "stats/*") {
	int cid = http.Int(0);
	SQLR * Select(ID, NAME, LAST_ACTIVITY, LAST_WORK, DESCR, SRC)
	       .From(CLIENT).Where(ID == cid);
	ValueMap client;
	if(!SQLR.Fetch(client)){
		http << "unknown client";
		return;
	}
	SQLR * Select(CMT_UID,
	              OK + ERR + FAIL + SKIP, 
	              OK,
	              ERR,
	              FAIL,
	              SKIP,
	              TimeDiff(START, FINISHED).As("DURATION"),
	              MSG, AUTHOR, DT, CMT, BRANCH)
	        .From(RESULT)
	        .InnerJoin(COMMITS).On(CMT_UID==UID)
	        .Where(cid==CLIENT_ID && STATUS!=WD_INPROGRESS && CommitFilter(http, true))
	        .OrderBy(Descending(DT))
	        .Limit(100);
	ValueMap point;
	ValueMap revlog;
	ValueMap vm;
	Vector<Vector<Value> > stats;
	Vector<Value> row;
	stats.SetCount(6);
	Vector<String> colors;
	Vector<Vector<Value> > rows;
	while(SQLR.Fetch(row)){
		rows.AddPick(row);
	}
	int top = rows.GetCount() - 1;
	for (int n = top; n >= 0; --n) {
		Vector<Value>& row = rows[n];
		for(int i = 0; i < 6; i++){
			point.Set("x", top-n);
			point.Set("y", row[1+i]);
			stats[i].Add(point);
		}
		colors.Add(ComputeColor(0, row[2], row[4], row[3], true).To<RawHtmlText>().text);
		vm.Set("MSG",row[7]);
		vm.Set("AUTHOR",row[8]);
		vm.Set("DT",row[9]);
		vm.Set("CMT",row[10]);
		vm.Set("BRANCH",row[11]);
		revlog.Add(top-n, vm);
	}
	
	http("CLIENT", client)
	    ("TOTAL", ValueArray(stats[0]))
	    ("PASS", ValueArray(stats[1]))
	    ("ERR", ValueArray(stats[2]))
	    ("FAIL", ValueArray(stats[3]))
	    ("SKIP", ValueArray(stats[4]))
	    ("DURATION", ValueArray(stats[5]))
	    ("COLORS", Raw(Join(colors, ", ")))
	    ("REVLOG", revlog)
	 .RenderResult("templates/stats");
}

SKYLARK(Favicon, "favicon.ico") {
	http.Redirect(ServeStaticPage, "img/favicon.png");
}

SKYLARK(Robots, "robots.txt") {
	http.Redirect(ServeStaticPage, "misc/robots.txt");
}

SKYLARK(NotFound, "**") {
	String target(Ini::server_url);
	for(int i = 0; i < http.GetParamCount(); ++i)
		target.Cat() << "/" << http[i];
	http("PAGE", target)
	 .RenderResult("templates/404")
	 .Response(404, "Not found");
}
